// Controller to test hardware mapping, for all sensors and actuators.

// INPUTS

// TESTING:
input bool s_Tstartbutton;     // 0
input bool s_Tstopbutton;      // 1
input bool s_Tautoswitch;      // 2
input bool s_Tresetbutton;     // 3

input bool s_Tin4;             // 4
input bool s_Tin5;             // 5
input bool s_Tin6;             // 6
input bool s_Tin7;             // 7

input bool s_elevator_up;      // 8
input bool s_elevator_down;    // 9
input bool s_pusher;           // 10
input bool s_optical;          // 11
input bool s_capacitive;       // 12
input bool s_reflective;       // 13
input bool s_productheight;    // 14
input bool s_bufferingbusy;    // 15

input bool s_Tinitialized;     // 16

// BUFFERING:
input bool s_Bstartbutton;     // 17
input bool s_Bstopbutton;      // 18
input bool s_Bautoswitch;      // 19
input bool s_Bresetbutton;     // 20

input bool s_Bin4;             // 21
input bool s_Bin5;             // 22
input bool s_Bin6;             // 23
input bool s_Bin7;             // 24

input bool s_product;          // 25
input bool s_atseparator;      // 26
input bool s_atexit;           // 27
input bool s_separator_opened; // 28
input bool s_separator_closed; // 29
input bool s_processingbusy;   // 30

input bool s_Binitialized;     // 31

// OUTPUTS

// TESTING:
alg bool a_Tstartled      = counter.count = 0; // 0
alg bool a_Tresetled      = counter.count = 1; // 1
alg bool a_TledQ1         = blinker.tQ1; // 2
alg bool a_TledQ2         = counter.count = 3; // 3

alg bool a_Tout4          = counter.count = 4; // 4
alg bool a_Tout5          = counter.count = 5; // 5
alg bool a_Tout6          = counter.count = 6; // 6
alg bool a_Tout7          = counter.count = 7; // 7

alg bool a_elevator_up    = counter.count = 8; // 8
alg bool a_elevator_down  = counter.count = 9; // 9
alg bool a_pusher         = counter.count = 10; // 10
alg bool a_airslide       = counter.count = 11; // 11
alg bool a_testingready   = counter.count = 12; // 12

// BUFFERING:
alg bool a_Bstartled      = counter.count = 13; // 13
alg bool a_Bresetled      = counter.count = 14; // 14
alg bool a_BledQ1         = counter.count = 15; // 15
alg bool a_BledQ2         = counter.count = 16; // 16

alg bool a_Bout4          = counter.count = 17; // 17
alg bool a_Bout5          = counter.count = 18; // 18
alg bool a_Bout6          = counter.count = 19; // 19
alg bool a_Bout7          = counter.count = 20; // 20

alg bool a_separator      = counter.count = 21; // 21
alg bool a_conveyer       = counter.count = 22; // 22
alg bool a_bufferingready = counter.count = 23; // 23

// COUNTERS

// Start button push counter.
plant counter:
  disc int count = 0;

  location off:
    initial;
    edge when s_Tstartbutton do count := count + 1 goto on;

  location on:
    edge when not s_Tstartbutton goto off;
end

automaton blinker:
	cont timer der 1;
	disc bool tQ1;
	disc bool tQ2;
	location Start:
		initial;
		edge when s_Tinitialized and s_Binitialized do timer := 0 goto Wait;
	location Wait2s:
		edge when timer > 2 do tQ2 := true goto ActivateQ2;
	location Q2Activated:
		edge when s_TstartButton do tQ2 := false;
	location WaitForRelease:
		edge when not s_TstartButton goto BinkQ1On;
	location BlinkQ1On:
		edge when timer > 0.5 do timer := 0 goto BlinkQ1Off;
	location BlinkQ1Off:
		edge when timer > 0.5 do timer := 0 goto BlinkQ1On;

end
