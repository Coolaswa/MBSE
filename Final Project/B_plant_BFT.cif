import "TB_SVG_BFT.cif";
import "TB_Defs_BFT.cif";
import "TB_SVGConstants_BFT.cif";
import "TB_box_BFT.cif";

input bool a_conveyer;
input bool a_separator;

alg bool s_product = EntrySensor.isActive or b_BS01.Pressed;
alg bool s_atseparator = AtSepSensor.isActive;
alg bool s_atexit = ExitSensor.isActive;
alg bool s_processingbusy = ProcessingBusySensor.On;

event ProcessingBusyClicked;
event ConveyerClicked;
event BS01Clicked; //, BS02Clicked, BS03Clicked;

b_BS01: Button(BS01Clicked);
svg_b_BS01: Button_svg(BS01Clicked, "BS01", "yellow", "grey", b_BS01.Pressed);
svg_b_i_BS01: Button_svg(BS01Clicked, "i_BS01", "red", "grey", s_product);

svg_s_product: LED_svg("s_product_entry", Const.Sensors.onColor, Const.Sensors.offColor, EntrySensor.isActive);
svg_s_atseparator: LED_svg("s_product_separator", Const.Sensors.onColor, Const.Sensors.offColor, AtSepSensor.isActive);
svg_s_atexit: LED_svg("s_product_exit", Const.Sensors.onColor, Const.Sensors.offColor, ExitSensor.isActive);
svg_s_separator_opened: LED_svg("s_separator_opened", Const.Sensors.onColor, Const.Sensors.offColor, Separator.Left);
svg_s_separator_closed: LED_svg("s_separator_closed", Const.Sensors.onColor, Const.Sensors.offColor, Separator.Right);

b_processing: Button(ProcessingBusyClicked);
svg_b_processing: Button_svg(ProcessingBusyClicked, "s_processing_busy", "yellow", "grey", ProcessingBusySensor.On);

b_conveyer: Button(ConveyerClicked);
svg_b_conveyer: Button_svg(ConveyerClicked, "b_conveyor", "yellow", "grey", b_conveyer.state);

svg_conv: Conveyer_svg(1, Belt.wheelRotation);

group AtSepSensor:
	alg int boxI = RectRectColl((Const.Sensors.AtSepSensorBounds[x],
	 						    Const.Sensors.AtSepSensorBounds[y],
	  							Const.Sensors.AtSepSensorBounds[width],
	   							Const.Sensors.AtSepSensorBounds[height]), BoxUpdater.data);
	alg bool isActive =  (boxI != -1);
end

group EntrySensor:
	alg int boxI = RectRectColl((Const.Sensors.EntrySensorBounds[x],
	 						    Const.Sensors.EntrySensorBounds[y],
	  							Const.Sensors.EntrySensorBounds[width],
	   							Const.Sensors.EntrySensorBounds[height]), BoxUpdater.data);
	alg bool isActive =  (boxI != -1);
end

group ExitSensor:
	alg int boxI = RectRectColl((Const.Sensors.ExitSensorBounds[x],
	 						    Const.Sensors.ExitSensorBounds[y],
	  							Const.Sensors.ExitSensorBounds[width],
	   							Const.Sensors.ExitSensorBounds[height]), BoxUpdater.data);
	alg bool isActive =  (boxI != -1);
end

automaton ProcessingBusySensor: //(Press Button)
    cont timer der 1;
	location On:
		edge when not s_Tautoswitch and b_processing.Released goto Off;
		edge when s_Tautoswitch and timer > 20 do timer := 0 goto Off;
	location Off:
        initial;
        edge when not s_Tautoswitch and b_processing.Pressed goto On;
        edge when s_Tautoswitch and timer > 3 do timer := 0 goto On;
end


automaton Belt:
    cont wheelRotation der 3*Belt.speed;
	alg real speed;
	cont x der speed;
	location Moving:
		equation speed = -60;
		edge when not a_conveyer goto Standstill;
	location Standstill:
		initial;
		equation speed = 0;
		edge when a_conveyer goto Moving;
end

automaton Separator:	//Separator needs to turn/rotate when going from left to right, to be added
    location Right:
        edge when not a_separator goto Left;
    location Left:
        initial;
        edge when a_separator goto Right;
end

