svgfile "conv_line_4.svg";

import "generator.cif";
import "entry_sending_protocol.cif";
import "conv_def.cif";

input int[0..1] a_motor_0;
input int[0..1] a_motor_1;
input int[0..1] a_motor_2;
input int[0..1] a_motor_3;

input bool ctrl0_R2R;

alg bool s_PEC_0 = plnt.conv0.s;
alg bool s_PEC_1 = plnt.conv1.s;
alg bool s_PEC_2 = plnt.conv2.s;
alg bool s_PEC_3 = plnt.conv3.s;

alg tuple (bool next_reset_ES, R2S, TIP) entry_tpl = (plnt.entry.next_reset_ES, plnt.entry.R2S, plnt.entry.TIP);

event product ec0;

group plnt:
    event product ec0p, c0c1p, c1c2p, c2c3p, c3c4p;

    // gen   : Generator(6, 2, entry.e_sending_position_reached);
    // gen   : GeneratorList([6, 10, 13], 2, entry.e_sending_position_reached);
    gen   : GeneratorStochastic(8, 24, 0, entry.e_R2S_pos);

    entry: Entry(ctrl0_R2R, ec0, ec0p);

    conv0: Conveyer(0, conv1.xlast, a_motor_0, ec0p,  c0c1p);
    conv1: Conveyer(1, conv2.xlast, a_motor_1, c0c1p, c1c2p);
    conv2: Conveyer(2, conv3.xlast, a_motor_2, c1c2p, c2c3p);
    conv3: Conveyer(3, conv4.xlast, a_motor_3, c2c3p, c3c4p);
    conv4: ExitConv(                                  c3c4p);
end
