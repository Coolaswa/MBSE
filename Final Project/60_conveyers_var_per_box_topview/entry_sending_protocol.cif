// see controller in "Cdef.cif" for comments

import "svg_def.cif";

group def Entry(alg bool next_can_receive; event product e_snd_prd!, e_send_prod!):
    event e_R2S_pos;    // for synchronization with Generator (if present)

    alg bool motor = entry.motor;
    alg bool R2S = entry.R2S;
    alg bool TIP = entry.TIP;
    alg bool next_reset_ES = true;

    automaton entry:
        alg bool motor;
        alg bool R2S, TIP;

        event toSend, toWaitR2S;

        alg int a_v =  if motor: 1 else 0 end;

        cont t_atend der -1;    // timer head product at conveyer edge

        cont x  = -1;

        equation x' = if -0.5 < x : a_v * 1.0 else 0.0 end;

        // wait until sending position has been reached
        location WaitR2SPosition:
            equation motor = true;
            equation R2S   = false;
            equation TIP   = false;

            initial;
            // generator can synchronize with this event to restrict occurrence at product arrival
            edge e_R2S_pos
                            do x := conv_length - 0.5           goto WaitR2R;

        location WaitR2R:
            equation motor = next_can_receive;
            equation R2S   = true;
            equation TIP   = false;

            edge toSend     when next_can_receive               goto SignalController;

        /*  Initiate transfer of product to next conveyer.
            Wait to send product to next controller (e_snd_prd!0) until product head at end of conveyer.

        */
        location SignalController:
            equation motor = next_can_receive;
            equation R2S   = true;
            equation TIP   = true;

            edge e_snd_prd!2     when x >= conv_length          goto SendProduct;   // send position to next controller

        location SendProduct:
            equation motor = next_can_receive;
            equation R2S   = true;
            equation TIP   = true;

            edge e_send_prod!0                                  goto WaitTail;      // send position to next conveyer

        // Wait until product has completely left this conveyer,
        location WaitTail:
            equation motor = next_can_receive;
            equation R2S   = true;
            equation TIP   = true;

            edge toWaitR2S  when x >= conv_length + prod_length
                            do x := -1                          goto WaitR2SPosition;
    end

    svg: Entry_SVG(<string>entry, entry.x);
end
