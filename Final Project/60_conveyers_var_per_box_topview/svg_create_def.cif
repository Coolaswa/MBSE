svgfile "conveyer.template.svg";

import "common_create_SVG.cif";

/*  Assume initial positions of conveyer, entry box and exit box all to be (0,0).
    In this way, the required absolute target position equals the required relative translation,
    since the required relative translation equals the required absolute target point minus the initial position.
    Also, in this way, the object can be rotated first, using the default (0,0) rotation point.
    Note that in Inkscape, you can only define relative translations on a group of objects.
    The absolute position of a group of objects cannot be set.
    Initial positions of objects are:
        - entry box:    right midpoint
        - exit box:     left midpoint
        - conveyer:     midpoint tail
        - product:      midpoint head
*/
group def Create_Conv_SVG   (alg int nr
                            ; alg degrees degr_angle
                            ; alg svg_position conv_tail
                            ):
    // Calculate new position of conveyer head (after translation)
    alg svg_position conv_head = translate_point(conv_tail, degr_angle, conv_length);

     // copy conveyer group gconv and copy product group gprod (containing box and virtual sensor for controller)
    // prefix both groups (and their elements) with "cv" followed by the conveyer number
    svgcopy id "gconv" pre "cv" + <string>nr + "_";
    svgcopy id "gprod" pre "cv" + <string>nr + "_";


    // rotate and translate the conveyer group to its required position
    svgout id "cv" + <string>nr + "_gconv"  attr "transform" value
        fmt("translate(%s,%s) rotate(%s)", conv_tail[x], conv_tail[y], degr_angle);           // rotate, then translate
//         fmt("rotate(%s,%s,%s) translate(%2$s,%3$s)", degr_angle, conv_head[x], conv_head[y]); // translate, then rotate

    // rotate and translate the product group to its required position
    svgout  id "cv" + <string>nr + "_gprod" attr "transform" value
        fmt("translate(%s,%s) rotate(%s)", conv_tail[x], conv_tail[y], degr_angle);           // rotate, then translate

    // creating the product and virtual head group for a product
    group def ProdViz(alg int prod_nr):
        svgcopy id "cv" + <string>nr + "_gbox"   post <string>prod_nr;  // copy box group
        svgcopy id "cv" + <string>nr + "_gvhead" post <string>prod_nr;  // copy virtual head group for controller

        svgout id "cv" + <string>nr + "_box_id" + <string>prod_nr text value <string>nr + "_" + <string>prod_nr;
    end
    prod0: ProdViz(0);
    prod1: ProdViz(1);
    prod2: ProdViz(2);

    // make originals (that have been copied) invisible
    svgout id "cv" + <string>nr + "_gbox"   attr "display" value "none";
    svgout id "cv" + <string>nr + "_gvhead" attr "display" value "none";

end

group def Create_Entry_SVG(alg degrees degr_angle; alg svg_position entry_pos):
    svgcopy id "gprod" pre "entry_";

    svgout  id "entry_gprod" attr "transform" value
        fmt("translate(%s,%s) rotate(%s)", entry_pos[x], entry_pos[y], degr_angle);

    svgout id "entry_box_id" text value "";                        // no box id in entry conveyer
    svgout id "entry_gvhead" attr "display" value "none";           // no virtual head in entry conveyer

    svgout  id "entry" attr "transform" value
        fmt("translate(%.1f,%.1f) rotate(%s)", entry_pos[x], entry_pos[y], degr_angle); // grey entry square
end

group def Create_Exit_SVG(alg degrees degr_angle; alg svg_position exit_pos):
    svgcopy id "gprod" pre "exit_";

    svgout  id "exit_gprod" attr "transform" value
        fmt("translate(%s,%s) rotate(%s)", exit_pos[x], exit_pos[y], degr_angle);

    svgout  id "exit" attr "transform" value
        fmt("translate(%s,%s) rotate(%s)", exit_pos[x], exit_pos[y], degr_angle);

    svgout id "exit_box_id" text           value "";
    svgout id "exit_gvhead" attr "display" value "none";    // no virtual head in exit conveyer
end

// Hide original objects
svgout id "gconv" attr "display" value "none";
svgout id "gprod" attr "display" value "none";

