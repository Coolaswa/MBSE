// Controller to test hardware mapping, for all sensors and actuators.
import "testing_buffering_station_plant.cif";

automaton Coordinator:
    alg LiftState liftState;
    alg bool pusherExtending;
    location ManualMode:
        equation liftState = ManualControl.Lift.state;
        equation pusherExtending = ManualControl.PusherContr.Extending;
        initial;
    location AutoMode:
        equation liftState = AutoControl.Lift.state;
        equation pusherExtending = AutoControl.PusherContr.Extending;
end

enum LiftState = UP, STOP, DOWN;
group ManualControl:
	automaton Lift:
		alg LiftState state;
		location Up:
			equation state = UP;
			edge when b_lift_up.Released goto Stop;
			edge when b_lift_down.Pressed and b_lift_up.Released goto Down;
		location Stop:
			initial;
			equation state = STOP;
			edge when b_lift_up.Pressed goto Up;
			edge when b_lift_down.Pressed goto Down;
		location Down:
			equation state = DOWN;
			edge when b_lift_up.Pressed and b_lift_down.Released  goto Up;
			edge when b_lift_down.Released goto Stop;
	end

	automaton PusherContr:
		location Extending:
			edge when b_pusher.Released goto Retracting;
		location Retracting:
			initial;
			edge when CountFive.Five goto Lockdown;		//Pusher will not push when the buffer is full
			edge when b_pusher.Pressed goto Extending;
		location Lockdown:
			edge when CountFive.Four goto Retracting;
	end

    automaton Factory:
        alg string boxColor = if b_color.Released: "black" else "red" end;
        alg bool isThick = svg_b_height.state = 0;
        location Waiting:
            initial;
            edge spawn_clicked goto SpawnBlock;
        location SpawnBlock:
            edge spawn_new_block! (Const.Box.StartBounds, boxColor, isThick,0) goto Waiting;
    end
end

automaton UseCase:
    disc int c = 1;
    location Case1:
        initial;
        edge when false do c := 2 goto Case2 ;
        //edge when b_lift_up.Pressed goto Case3;
    location Case2:
        edge when b_lift_up.Pressed goto Case1;
        edge when b_lift_up.Pressed goto Case3;
    location Case3:
        edge when b_lift_up.Pressed goto Case1;
        edge when b_lift_up.Pressed goto Case2;
end

group AutoControl:
    //alg bool isActive = false;

	automaton Lift:
		alg LiftState state;
		location Waiting:
			initial;
			equation state = STOP;
			edge spawn_new_block goto VerifyBlock1;
		location VerifyBlock1:
		    equation state = STOP;
		    edge PusherContr.extent when s_capacitive goto PushingBlockAtBot;
		    edge when not s_capacitive goto GoingUp;
		location PushingBlockAtBot:
		    equation state = STOP;
		    edge PusherContr.retract goto Waiting;
		location GoingUp:
			equation state = UP;
			edge when s_elevator_up goto VerifyBlock2;
		location VerifyBlock2:
		    equation state = STOP;
		    edge when s_productheight goto GoingDownReject;
		    edge PusherContr.extent when not s_productheight goto PushingBlockAtTop;
		location GoingDownReject:
		    equation state = DOWN;
		    edge PusherContr.extent when s_elevator_down goto PushingBlockAtBot;
		location PushingBlockAtTop:
			equation state = STOP;
			edge PusherContr.retract goto GoingDownEmpty;
		location GoingDownEmpty:
			equation state = DOWN;
			edge when s_elevator_down goto Waiting;
	end

	automaton PusherContr:
		event extent, retract;
		location Extending:
			edge retract when s_pusher goto Retracting;
			edge when CountFive.Five goto Lockdown;
		location Retracting:
			initial;
			edge extent goto Extending;
			edge when CountFive.Five goto Lockdown;
		location Lockdown:								//Pusher will not push when the buffer is full
			edge when CountFive.Four goto Retracting;
	end

	automaton Factory:
        disc dist bool d1 =
                    if UseCase.c = 1: bernoulli(0)
                    elif UseCase.c = 2: bernoulli(0.3)
                    elif UseCase.c = 3: bernoulli(0.05)
                    else bernoulli(0) end;
        disc dist bool d2 =
                    if UseCase.c = 1: bernoulli(0)
                    elif UseCase.c = 2: bernoulli(0.5)
                    elif UseCase.c = 3: bernoulli(0.05)
                    else bernoulli(0) end;
        disc dist real d3 = normal(10,5);
        alg string boxColor = if isBlack: "black" else "red" end;
        disc bool isThick;
        disc bool isBlack;
        cont timer der -1;
        location Waiting:
            initial;
        //    edge when timer < 0 do (isThick, d1) := sample d1, (isBlack, d2) := sample d2 goto SpawnBlock;
        location SpawnBlock;
      //      edge spawn_new_block! (Const.Box.StartBounds, boxColor, isThick) do (timer, d3) := sample d3 goto Waiting;
    end
end


	automaton SeparatorContr:
		location EmptyLeft:
			initial;
			edge when AtSepSensor.isActive goto FullLeft;
		location FullLeft:
			edge when ProcessingBusySensor.Off goto EmptyRight; //to be replaced by s_processingbusy
		location EmptyRight:
			edge when ExitSensor.isActive goto EmptyLeft;
	end


	automaton ConveyerContr:
		location Empty: 	//To save energy, it is useful to not have the conveyer active when there are no products on it.
			initial;
			edge when CountFive.One goto NotMoving;
		location Moving:
			edge when SeparatorContr.FullLeft goto NotMoving;
			edge when CountFive.Zero goto Empty;
		location NotMoving:
			edge when SeparatorContr.EmptyRight goto Moving;
			edge when SeparatorContr.EmptyLeft goto Moving;
	end



