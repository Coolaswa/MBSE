// Controller to test hardware mapping, for all sensors and actuators.
import "testing_buffering_station_plant.cif";
// INPUTS

// TESTING:
//input bool s_Tstartbutton;     // 0
/**input bool s_Tstopbutton;      // 1
input bool s_Tautoswitch;      // 2
input bool s_Tresetbutton;     // 3

input bool s_Tin4;             // 4
input bool s_Tin5;             // 5
input bool s_Tin6;             // 6
input bool s_Tin7;             // 7

input bool s_elevator_up;      // 8
input bool s_elevator_down;    // 9
input bool s_pusher;           // 10
input bool s_optical;          // 11
input bool s_capacitive;       // 12
input bool s_reflective;       // 13
input bool s_productheight;    // 14
input bool s_bufferingbusy;    // 15

input bool s_Tinitialized;     // 16*/

// BUFFERING:
/**input bool s_Bstartbutton;     // 17
input bool s_Bstopbutton;      // 18
input bool s_Bautoswitch;      // 19
input bool s_Bresetbutton;     // 20

input bool s_Bin4;             // 21
input bool s_Bin5;             // 22
input bool s_Bin6;             // 23
input bool s_Bin7;             // 24

input bool s_product;          // 25
input bool s_atseparator;      // 26
input bool s_atexit;           // 27
input bool s_separator_opened; // 28
input bool s_separator_closed; // 29
input bool s_processingbusy;   // 30

input bool s_Binitialized;     // 31
*/
// OUTPUTS

// TESTING:
/**alg bool a_Tstartled      = counter.count = 0; // 0
alg bool a_Tresetled      = counter.count = 1; // 1
alg bool a_TledQ1         = blinker.tQ1; // 2
alg bool a_TledQ2         = counter.count = 3; // 3

alg bool a_Tout4          = counter.count = 4; // 4
alg bool a_Tout5          = counter.count = 5; // 5
alg bool a_Tout6          = counter.count = 6; // 6
alg bool a_Tout7          = counter.count = 7; // 7

alg bool a_elevator_up    = counter.count = 8; // 8
alg bool a_elevator_down  = counter.count = 9; // 9
alg bool a_pusher         = counter.count = 10; // 10
alg bool a_airslide       = counter.count = 11; // 11
alg bool a_testingready   = counter.count = 12; // 12

// BUFFERING:
alg bool a_Bstartled      = counter.count = 13; // 13
alg bool a_Bresetled      = counter.count = 14; // 14
alg bool a_BledQ1         = counter.count = 15; // 15
alg bool a_BledQ2         = counter.count = 16; // 16

alg bool a_Bout4          = counter.count = 17; // 17
alg bool a_Bout5          = counter.count = 18; // 18
alg bool a_Bout6          = counter.count = 19; // 19
alg bool a_Bout7          = counter.count = 20; // 20

alg bool a_separator      = counter.count = 21; // 21
alg bool a_conveyer       = counter.count = 22; // 22
alg bool a_bufferingready = counter.count = 23; // 23*/
ctrl: AutoControl();

enum LiftState = UP, STOP, DOWN;
group def ManualControl():
	automaton Lift:
		alg LiftState state;
		location Up:
			equation state = UP;
			edge when b_lift_up.Released goto Stop;
			edge when b_lift_down.Pressed and b_lift_up.Released goto Down;
		location Stop:
			initial;
			equation state = STOP;
			edge when b_lift_up.Pressed goto Up;
			edge when b_lift_down.Pressed goto Down;
		location Down:
			equation state = DOWN;
			edge when b_lift_up.Pressed and b_lift_down.Released  goto Up;
			edge when b_lift_down.Released goto Stop;
	end

	automaton PusherContr:
		location Extending:
			edge when b_pusher.Released goto Retracting;
		location Retracting:
			initial;
			edge when CountFive.Five goto Lockdown;		//Pusher will not push when the buffer is full
			edge when b_pusher.Pressed goto Extending;
		location Lockdown:
			edge when CountFive.Four goto Retracting;
	end

    automaton Factory:
        alg string boxColor = if b_color.Released: "black" else "red" end;
        alg bool isThick = svg_b_height.state = 0;
        location Waiting:
            initial;
            edge spawn_clicked goto SpawnBlock;
        location SpawnBlock:
            edge spawn_new_block! (Const.Box.StartBounds, boxColor, isThick) goto Waiting;
    end
end

automaton UseCase:
    location Case1:
        initial;
        edge when b_lift_up.Pressed goto Case2;
        edge when b_lift_up.Pressed goto Case3;
    location Case2:
        edge when b_lift_up.Pressed goto Case1;
        edge when b_lift_up.Pressed goto Case3;
    location Case3:
        edge when b_lift_up.Pressed goto Case1;
        edge when b_lift_up.Pressed goto Case2;
end

group def AutoControl():

	automaton Lift:
		alg LiftState state;
		location Waiting:
			initial;
			equation state = STOP;
			edge spawn_new_block goto VerifyBlock1;
		location VerifyBlock1:
		    equation state = STOP;
		    edge PusherContr.extent when s_capacitive goto PushingBlockAtBot;
		    edge when not s_capacitive goto GoingUp;
		location PushingBlockAtBot:
		    equation state = STOP;
		    edge PusherContr.retract goto Waiting;
		location GoingUp:
			equation state = UP;
			edge when s_elevator_up goto VerifyBlock2;
		location VerifyBlock2:
		    equation state = STOP;
		    edge when s_productheight goto GoingDownReject;
		    edge PusherContr.extent when not s_productheight goto PushingBlockAtTop;
		location GoingDownReject:
		    equation state = DOWN;
		    edge PusherContr.extent when s_elevator_down goto PushingBlockAtBot;
		location PushingBlockAtTop:
			equation state = STOP;
			edge PusherContr.retract goto GoingDownEmpty;
		location GoingDownEmpty:
			equation state = DOWN;
			edge when s_elevator_down goto Waiting;
	end

	automaton PusherContr:
		event extent, retract;
		location Extending:
			edge retract when s_pusher goto Retracting;
			edge when CountFive.Five goto Lockdown;
		location Retracting:
			initial;
			edge extent goto Extending;
			edge when CountFive.Five goto Lockdown;
		location Lockdown:								//Pusher will not push when the buffer is full
			edge when CountFive.Four goto Retracting;
	end

	automaton Factory:
        disc dist bool d1 =
                    if UseCase.Case1: bernoulli(0)
                    //elif UseCase.Case2: bernoulli(0.3)
                //    elif UseCase.Case3: bernoulli(0.05)
                    else bernoulli(0) end;
        disc dist bool d2 =
                    if UseCase.Case1: bernoulli(0)
                  //  elif UseCase.Case2: bernoulli(0.5)
                //    elif UseCase.Case3: bernoulli(0.05)
                    else bernoulli(0) end;
        disc dist real d3 = normal(10,5);
        alg string boxColor = if isBlack: "black" else "red" end;
        disc bool isThick;
        disc bool isBlack;
        cont timer der -1;
        location Waiting:
            initial;
            edge when timer < 0 do (isThick, d1) := sample d1, (isBlack, d2) := sample d2 goto SpawnBlock;
        location SpawnBlock:
            edge spawn_new_block! (Const.Box.StartBounds, boxColor, isThick) do (timer, d3) := sample d3 goto Waiting;
    end
end


	automaton SeparatorContr:
		location EmptyLeft:
			initial;
			edge when AtSepSensor.isActive goto FullLeft;
		location FullLeft:
			edge when ProcessingBusySensor.Off goto EmptyRight; //to be replaced by s_processingbusy
		location EmptyRight:
			edge when ExitSensor.isActive goto EmptyLeft;
	end


	automaton ConveyerContr:
		location Empty: 	//To save energy, it is useful to not have the conveyer active when there are no products on it.
			initial;
			edge when CountFive.One goto NotMoving;
		location Moving:
			edge when SeparatorContr.FullLeft goto NotMoving;
			edge when CountFive.Zero goto Empty;
		location NotMoving:
			edge when SeparatorContr.EmptyRight goto Moving;
			edge when SeparatorContr.EmptyLeft goto Moving;
	end



