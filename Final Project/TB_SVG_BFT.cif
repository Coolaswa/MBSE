import "T_plant_BFT.cif";
svgfile "SystemSVG.svg";

input bool a_airslide_auto;
input bool a_TledQ1;

test: Create_Boxes_svg(BoxUpdater.data);
group def Create_Boxes_svg(alg list[10] BoxData data):
    svg_box1: Create_Box_svg(1, data[0]);
    svg_box2: Create_Box_svg(2, data[1]);
    svg_box3: Create_Box_svg(3, data[2]);
    svg_box4: Create_Box_svg(4, data[3]);
    svg_box5: Create_Box_svg(5, data[4]);
    svg_box6: Create_Box_svg(6, data[5]);
    svg_box7: Create_Box_svg(7, data[6]);
    svg_box8: Create_Box_svg(8, data[7]);
    svg_box9: Create_Box_svg(9, data[8]);
    svg_box10: Create_Box_svg(10, data[9]);
end

group def Create_Box_svg(alg int idfier; alg BoxData data):
     alg string name = "Product1_" + <string>idfier;
     svgcopy id "Product1" post "_" + <string>idfier;
     svgout id name attr "transform" value fmt("translate(%f, %f) rotate(%f)", data[bounds][x], data[bounds][y], data[rotation]);
     svgout id name attr "opacity" value 1;
     svgout id "ProductGraphics1_" + <string>idfier attr "fill" value data[color];

     alg real heightScale = if data[thick]: 1.2 else 1 end;
     svgout id "ProductGraphics1_" + <string>idfier attr "transform"
         value fmt("matrix(1,0,0,%f,0,%f)", heightScale, -(heightScale - 1) * 50);
end

group def Button_svg(event action; alg string idfier, onColor, offColor; alg bool state):
	svgin id idfier event action;
	svgout id idfier attr "fill" value if state: onColor
									   else offColor end;
end

group def Switch_svg(event action; alg bool state):
    svgin id "b_colour" event action;
    svgout id "colour_knob" attr "transform" value if state: "rotate(180,4.5,4.5)" else "" end;
end

automaton def Switch2_svg(event action):
    const list real SwitchHeightHeights = [0.5, 3.25, 6.25];
    disc int state = 0;
    svgin id "b_height" event action;
    svgout id "height_bar" attr "transform" value fmt("translate(0, %f)", SwitchHeightHeights[state]);
    svgout id "height_pole" attr "transform" value fmt("rotate(%d,0.5,2.5)", 90 * state);
    location:
        initial;
        edge action do state := (state+1) mod 3;
end

group def Conveyer_svg(alg int idfier; alg real wheelRotation):
    svgout id fmt("Conv%d_Wheel", idfier) attr "transform" value fmt("rotate(%d)", round(wheelRotation) mod 360);
    svgout id fmt("Conv%d_Wheel2", idfier) attr "transform" value fmt("rotate(%d)", round(wheelRotation) mod 360);
end

svgout id "Platform" attr "transform" value fmt("translate(0, %f)", Lift.y);

svgout id "a_pusher" attr "transform" value fmt("translate(%f, 0)", Pusher.x);
svgout id "time"   text value round(time);
svgout id "a_height_head" attr "transform" value fmt("translate(0, %f)", HeightSensor.y);
svgout id "Rotator" attr "transform" value fmt("rotate(%f)", Arm.armRot);
svgout id "Holder" attr "transform" value fmt("rotate(%f,6.25,60)", 180-Arm.armRot);

svgout id "Air" attr "opacity" value if a_airslide_auto: 1 else 0 end;
svgout id "s_q1" attr "fill" value if a_TledQ1: "yellow" else "grey" end;



