alg bool s_PEC_1 = plnt.conv1.s;
alg bool s_PEC_2 = plnt.conv2.s;
alg int[0..1] a_motor_1 = ctrl.c1.a_motor;
alg int[0..1] a_motor_2 = ctrl.c2.a_motor;
event void e_entry_c1;
const real SVG_scale = 30.0;
const real xinit1 = 4.0;
const real xinit2 = 3.0;
group ctrl:
  event void e_c1_c2;
  event void e_exit;
  automaton c1:
    alg int[0..1] a_motor;
    cont t = 0.0 der 1.0;
    event toAtSensOn;
    event toAtSensOff;
    event toEmptyOn;
    event toEmptyOff;
    location Initialize:
      initial;
      equation a_motor = 1;
      edge toAtSensOn when s_PEC_1 do t := 0.0 goto AtSensorOn;
      edge toEmptyOn when t >= 3.0 do t := 0.0 goto EmptyOn;
    location EmptyOn:
      equation a_motor = 1;
      edge e_entry_c1? goto Entering;
      edge toEmptyOff when t >= 5.0 goto EmptyOff;
    location EmptyOff:
      equation a_motor = 0;
      edge e_entry_c1? goto Entering;
    location Entering:
      equation a_motor = 1;
      edge toAtSensOn when s_PEC_1 do t := 0.0 goto AtSensorOn;
    location AtSensorOn:
      equation a_motor = 1;
      edge e_c1_c2! goto Leaving;
      edge toAtSensOff when t >= 0.4 goto AtSensorOff;
    location AtSensorOff:
      equation a_motor = 0;
      edge e_c1_c2! goto Leaving;
    location Leaving:
      equation a_motor = 1;
      edge toEmptyOn when not s_PEC_1 do t := 0.0 goto EmptyOn;
  end
  group svg1:
    alg int nr = 1;
    alg string state = <string>c1;
    svgout id "cv" + <string>nr + "_ctrl_state" text value state file "../conveyers.svg";
  end
  automaton c2:
    alg int[0..1] a_motor;
    cont t = 0.0 der 1.0;
    event toAtSensOn;
    event toAtSensOff;
    event toEmptyOn;
    event toEmptyOff;
    location Initialize:
      initial;
      equation a_motor = 1;
      edge toAtSensOn when s_PEC_2 do t := 0.0 goto AtSensorOn;
      edge toEmptyOn when t >= 3.0 do t := 0.0 goto EmptyOn;
    location EmptyOn:
      equation a_motor = 1;
      edge e_c1_c2? goto Entering;
      edge toEmptyOff when t >= 5.0 goto EmptyOff;
    location EmptyOff:
      equation a_motor = 0;
      edge e_c1_c2? goto Entering;
    location Entering:
      equation a_motor = 1;
      edge toAtSensOn when s_PEC_2 do t := 0.0 goto AtSensorOn;
    location AtSensorOn:
      equation a_motor = 1;
      edge e_exit! goto Leaving;
      edge toAtSensOff when t >= 0.4 goto AtSensorOff;
    location AtSensorOff:
      equation a_motor = 0;
      edge e_exit! goto Leaving;
    location Leaving:
      equation a_motor = 1;
      edge toEmptyOn when not s_PEC_2 do t := 0.0 goto EmptyOn;
  end
  group svg2:
    alg int nr = 2;
    alg string state = <string>c1;
    svgout id "cv" + <string>nr + "_ctrl_state" text value state file "../conveyers.svg";
  end
  automaton cexit:
    location:
      initial;
      edge e_exit?;
  end
end
group plnt:
  const real t_initial = 2.0;
  const real t_next_delay = 6.0;
  event void e_entry_cv1;
  event void e_cv1_cv2;
  event void e_exit;
  automaton gen:
    event prodArrival;
    cont t_next = t_initial der -1.0;
    location WaitNextBox:
      initial;
      edge prodArrival when t_next <= 0 goto SignalArrival;
    location SignalArrival:
      edge e_entry_c1 do t_next := t_next_delay goto WaitNextBox;
  end
  group svg_gen:
    alg string state = <string>gen;
    alg real t_next = gen.t_next;
    svgout id "gen_state" text value state file "../conveyers.svg";
    svgout id "t_next" text value fmt("t_next: %.1f", t_next) file "../conveyers.svg";
  end
  automaton entry:
    cont t_atend der -1.0;
    svgout id "entry_state" text value <string>self file "../conveyers.svg";
    svgout id "t_atend" text value fmt("t_atend: %.1f", max(t_atend, 0)) file "../conveyers.svg";
    svgout id "time_txt" text value fmt("Time: %.1f", time) file "../conveyers.svg";
    location SignalController:
      initial;
      edge e_entry_c1! do t_atend := 1.0 goto SendProduct;
    location SendProduct:
      edge e_entry_cv1! when t_atend <= 0 goto SignalController;
  end
  automaton conv1:
    alg bool s = x >= 5 or -0.5 < conv2.x and conv2.x < 3;
    cont x = xinit1;
    location WaitBox:
      initial x = -1.0;
      equation x' = 0.0;
      edge e_entry_cv1? do x := 0.0 goto WaitLeave;
    location WaitLeave:
      initial x >= 3.0;
      equation x' = a_motor_1 * 1.0;
      edge e_cv1_cv2! when x >= 6.0 and a_motor_1 > 0 do x := -1.0 goto WaitBox;
  end
  group svg_cv1:
    alg int nr = 1;
    alg string state = <string>conv1;
    alg real x = conv1.x;
    svgout id "cv" + <string>nr + "_state" text value state file "../conveyers.svg";
    svgout id "cv" + <string>nr + "_box" attr "transform" value fmt("translate(%s,0)", SVG_scale * x) file "../conveyers.svg";
    svgout id "cv" + <string>nr + "_box" attr "display" value if x > -0.5: "inline" else "none" end file "../conveyers.svg";
  end
  automaton conv2:
    alg bool s = x >= 5 or -0.5 < exit.x and exit.x < 3;
    cont x = xinit2;
    location WaitBox:
      initial x = -1.0;
      equation x' = 0.0;
      edge e_cv1_cv2? do x := 0.0 goto WaitLeave;
    location WaitLeave:
      initial x >= 3.0;
      equation x' = a_motor_2 * 1.0;
      edge e_exit! when x >= 6.0 and a_motor_2 > 0 do x := -1.0 goto WaitBox;
  end
  group svg_cv2:
    alg int nr = 2;
    alg string state = <string>conv2;
    alg real x = conv2.x;
    svgout id "cv" + <string>nr + "_state" text value state file "../conveyers.svg";
    svgout id "cv" + <string>nr + "_box" attr "transform" value fmt("translate(%s,0)", SVG_scale * x) file "../conveyers.svg";
    svgout id "cv" + <string>nr + "_box" attr "display" value if x > -0.5: "inline" else "none" end file "../conveyers.svg";
  end
  automaton exit:
    cont x = -1.0;
    event toWaitBox;
    location WaitBox:
      initial;
      equation x' = 0.0;
      edge e_exit? do x := 0.0 goto WaitBoxTail;
    location WaitBoxTail:
      equation x' = 1.0;
      edge toWaitBox when x >= 4.0 do x := -1.0 goto WaitBox;
  end
  group svg_exit:
    alg int nr = 3;
    alg real x = exit.x;
    svgout id "cv" + <string>nr + "_box" attr "transform" value fmt("translate(%s,0)", SVG_scale * x) file "../conveyers.svg";
    svgout id "cv" + <string>nr + "_box" attr "display" value if x > -0.5: "inline" else "none" end file "../conveyers.svg";
  end
end
group SVG:
  group io1:
    alg int nr = 1;
    alg int[0..1] a_motor = a_motor_1;
    alg bool s = s_PEC_1;
    svgout id "cv" + <string>nr + "_sensor_rect" attr "fill" value if s: "green" else "white" end file "../conveyers.svg";
    svgout id "cv" + <string>nr + "_belt_path" attr "fill" value switch a_motor: case 0: "rgb(220,220,220)" case 1: "green" else "black" end file "../conveyers.svg";
  end
  group io2:
    alg int nr = 2;
    alg int[0..1] a_motor = a_motor_2;
    alg bool s = s_PEC_2;
    svgout id "cv" + <string>nr + "_sensor_rect" attr "fill" value if s: "green" else "white" end file "../conveyers.svg";
    svgout id "cv" + <string>nr + "_belt_path" attr "fill" value switch a_motor: case 0: "rgb(220,220,220)" case 1: "green" else "black" end file "../conveyers.svg";
  end
end
svgout id "layer3" attr "display" value "inline" file "../conveyers.svg";
