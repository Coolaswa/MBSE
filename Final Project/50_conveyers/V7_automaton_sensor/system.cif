alg bool s_PEC_1 = plnt.s1.On;
alg bool s_PEC_2 = plnt.s2.On;
alg int[0..1] a_motor_1 = ctrl.c1.a_motor;
alg int[0..1] a_motor_2 = ctrl.c2.a_motor;
event void e_entry_c1;
const real SVG_scale = 30.0;
const real xinit1 = 4.0;
const real xinit2 = 3.0;
group ctrl:
  event void e_c1_c2;
  event void e_exit;
  group c1:
    alg int[0..1] a_motor = control.a_motor;
    alg int nr = 1;
    alg bool s = s_PEC_1;
    automaton control:
      alg int[0..1] a_motor;
      cont t = 0.0 der 1.0;
      event toAtSensOn;
      event toAtSensOff;
      event toEmptyOn;
      event toEmptyOff;
      location Initialize:
        initial;
        equation a_motor = 1;
        edge toAtSensOn when s do t := 0.0 goto AtSensorOn;
        edge toEmptyOn when t >= 3.0 do t := 0.0 goto EmptyOn;
      location EmptyOn:
        equation a_motor = 1;
        edge e_entry_c1? goto Entering;
        edge toEmptyOff when t >= 5.0 goto EmptyOff;
      location EmptyOff:
        equation a_motor = 0;
        edge e_entry_c1? goto Entering;
      location Entering:
        equation a_motor = 1;
        edge toAtSensOn when s do t := 0.0 goto AtSensorOn;
      location AtSensorOn:
        equation a_motor = 1;
        edge e_c1_c2! goto Leaving;
        edge toAtSensOff when t >= 0.4 goto AtSensorOff;
      location AtSensorOff:
        equation a_motor = 0;
        edge e_c1_c2! goto Leaving;
      location Leaving:
        equation a_motor = 1;
        edge toEmptyOn when not s do t := 0.0 goto EmptyOn;
    end
    group svg:
      alg int nr = .ctrl.c1.nr;
      alg string state = <string>control;
      svgout id "cv" + <string>nr + "_ctrl_state" text value state file "../conveyers.svg";
    end
  end
  group c2:
    alg int[0..1] a_motor = control.a_motor;
    alg int nr = 2;
    alg bool s = s_PEC_2;
    automaton control:
      alg int[0..1] a_motor;
      cont t = 0.0 der 1.0;
      event toAtSensOn;
      event toAtSensOff;
      event toEmptyOn;
      event toEmptyOff;
      location Initialize:
        initial;
        equation a_motor = 1;
        edge toAtSensOn when s do t := 0.0 goto AtSensorOn;
        edge toEmptyOn when t >= 3.0 do t := 0.0 goto EmptyOn;
      location EmptyOn:
        equation a_motor = 1;
        edge e_c1_c2? goto Entering;
        edge toEmptyOff when t >= 5.0 goto EmptyOff;
      location EmptyOff:
        equation a_motor = 0;
        edge e_c1_c2? goto Entering;
      location Entering:
        equation a_motor = 1;
        edge toAtSensOn when s do t := 0.0 goto AtSensorOn;
      location AtSensorOn:
        equation a_motor = 1;
        edge e_exit! goto Leaving;
        edge toAtSensOff when t >= 0.4 goto AtSensorOff;
      location AtSensorOff:
        equation a_motor = 0;
        edge e_exit! goto Leaving;
      location Leaving:
        equation a_motor = 1;
        edge toEmptyOn when not s do t := 0.0 goto EmptyOn;
    end
    group svg:
      alg int nr = .ctrl.c2.nr;
      alg string state = <string>control;
      svgout id "cv" + <string>nr + "_ctrl_state" text value state file "../conveyers.svg";
    end
  end
  automaton exit:
    location:
      initial;
      edge e_exit?;
  end
end
group plnt:
  event void e_entry_cv1;
  event void e_cv1_cv2;
  event void e_exit;
  automaton s0:
    event void e_off;
    alg int[0..2] s = if Off: 0 else 2 end;
    location Off:
      initial;
      edge e_off?;
  end
  automaton s1:
    event void e_on;
    event void e_off;
    alg int[0..2] val = if On: 2 else 0 end;
    location Off:
      initial;
      edge e_on? goto On;
      edge e_off?;
    location On:
      edge e_off? goto Off;
      edge e_on?;
  end
  automaton s2:
    event void e_on;
    event void e_off;
    alg int[0..2] val = if On: 2 else 0 end;
    location Off:
      initial;
      edge e_on? goto On;
      edge e_off?;
    location On:
      edge e_off? goto Off;
      edge e_on?;
  end
  group gen:
    alg real t_next_min = 2.0;
    alg real t_next_max = 10.0;
    alg real t_initial = 2.0;
    automaton gen:
      event prodArrival;
      cont t_next = t_initial der -1.0;
      disc dist real d = uniform(t_next_min, t_next_max);
      location WaitNextBox:
        initial;
        edge prodArrival when t_next <= 0 goto SignalArrival;
      location SignalArrival:
        edge e_entry_cv1 do (t_next, d) := sample d goto WaitNextBox;
    end
    group svg:
      alg string state = <string>gen;
      alg real t_next = gen.t_next;
      svgout id "gen_state" text value state file "../conveyers.svg";
      svgout id "t_next" text value fmt("t_next: %.1f", t_next) file "../conveyers.svg";
    end
  end
  automaton entry:
    cont t_atend der -1.0;
    svgout id "entry_state" text value <string>self file "../conveyers.svg";
    svgout id "t_atend" text value fmt("t_atend: %.1f", max(t_atend, 0)) file "../conveyers.svg";
    svgout id "time_txt" text value fmt("Time: %.1f", time) file "../conveyers.svg";
    location SignalController:
      initial;
      edge e_entry_c1! do t_atend := 1.0 goto SendProduct;
    location SendProduct:
      edge e_entry_cv1! when t_atend <= 0 goto SignalController;
  end
  group cv1:
    alg int nr = 1;
    alg real xinit = xinit1;
    alg int a_motor = a_motor_1;
    automaton conv:
      cont x = xinit;
      location WaitBox:
        initial x = -1.0;
        equation x' = 0.0;
        edge e_entry_cv1? do x := 0.0 goto WaitPrevSensor;
      location WaitPrevSensor:
        equation x' = a_motor * 1.0;
        edge s0.e_off! when x >= 3 goto WaitSensor;
      location WaitSensor:
        initial x >= 3;
        equation x' = a_motor * 1.0;
        edge s1.e_on! when x >= 5 goto WaitLeave;
      location WaitLeave:
        equation x' = a_motor * 1.0;
        edge e_cv1_cv2! when x >= 6 and a_motor > 0 do x := -1.0 goto WaitBox;
    end
    group svg:
      alg int nr = .plnt.cv1.nr;
      alg string state = <string>conv;
      alg real x = conv.x;
      svgout id "cv" + <string>nr + "_state" text value state file "../conveyers.svg";
      svgout id "cv" + <string>nr + "_box" attr "transform" value fmt("translate(%s,0)", SVG_scale * x) file "../conveyers.svg";
      svgout id "cv" + <string>nr + "_box" attr "display" value if x > -0.5: "inline" else "none" end file "../conveyers.svg";
    end
  end
  group cv2:
    alg int nr = 2;
    alg real xinit = xinit2;
    alg int a_motor = a_motor_2;
    automaton conv:
      cont x = xinit;
      location WaitBox:
        initial x = -1.0;
        equation x' = 0.0;
        edge e_cv1_cv2? do x := 0.0 goto WaitPrevSensor;
      location WaitPrevSensor:
        equation x' = a_motor * 1.0;
        edge s1.e_off! when x >= 3 goto WaitSensor;
      location WaitSensor:
        initial x >= 3;
        equation x' = a_motor * 1.0;
        edge s2.e_on! when x >= 5 goto WaitLeave;
      location WaitLeave:
        equation x' = a_motor * 1.0;
        edge e_exit! when x >= 6 and a_motor > 0 do x := -1.0 goto WaitBox;
    end
    group svg:
      alg int nr = .plnt.cv2.nr;
      alg string state = <string>conv;
      alg real x = conv.x;
      svgout id "cv" + <string>nr + "_state" text value state file "../conveyers.svg";
      svgout id "cv" + <string>nr + "_box" attr "transform" value fmt("translate(%s,0)", SVG_scale * x) file "../conveyers.svg";
      svgout id "cv" + <string>nr + "_box" attr "display" value if x > -0.5: "inline" else "none" end file "../conveyers.svg";
    end
  end
  group cv3:
    alg int nr = 3;
    automaton conv:
      cont x = -1.0;
      event toWaitBox;
      location WaitBox:
        initial;
        equation x' = 0.0;
        edge e_exit? do x := 0.0 goto WaitPrevSensor;
      location WaitPrevSensor:
        equation x' = 1.0;
        edge s2.e_off! when x >= 3.0 goto WaitBoxTail;
      location WaitBoxTail:
        equation x' = 1.0;
        edge toWaitBox when x >= 4 do x := -1.0 goto WaitBox;
    end
    group svg:
      alg int nr = .plnt.cv3.nr;
      alg real x = conv.x;
      svgout id "cv" + <string>nr + "_box" attr "transform" value fmt("translate(%s,0)", SVG_scale * x) file "../conveyers.svg";
      svgout id "cv" + <string>nr + "_box" attr "display" value if x > -0.5: "inline" else "none" end file "../conveyers.svg";
    end
  end
end
group SVG:
  group io1:
    alg int nr = 1;
    alg int[0..1] a_motor = a_motor_1;
    alg bool s = s_PEC_1;
    svgout id "cv" + <string>nr + "_sensor_rect" attr "fill" value if s: "green" else "white" end file "../conveyers.svg";
    svgout id "cv" + <string>nr + "_belt_path" attr "fill" value switch a_motor: case 0: "rgb(220,220,220)" case 1: "green" else "black" end file "../conveyers.svg";
  end
  group io2:
    alg int nr = 2;
    alg int[0..1] a_motor = a_motor_2;
    alg bool s = s_PEC_2;
    svgout id "cv" + <string>nr + "_sensor_rect" attr "fill" value if s: "green" else "white" end file "../conveyers.svg";
    svgout id "cv" + <string>nr + "_belt_path" attr "fill" value switch a_motor: case 0: "rgb(220,220,220)" case 1: "green" else "black" end file "../conveyers.svg";
  end
end
svgout id "layer3" attr "display" value "inline" file "../conveyers.svg";
