alg bool a_elevator_up_manual = ManualControl.Lift.state = UP;
alg bool a_elevator_down_manual = ManualControl.Lift.state = DOWN;
alg bool a_testingready_manual = true;
alg bool a_pusher_manual = ManualControl.PusherContr.Extending;

input bool b_lift_upPressed, b_lift_upReleased, b_lift_downPressed, b_lift_downReleased;
input bool b_pusherReleased, b_pusherPressed;
input bool s_bufferingbusy;

enum LiftState = UP, STOP, DOWN;
group ManualControl:
    automaton Lift:
        alg LiftState state;
        location Up:
            equation state = UP;
            edge when b_lift_upReleased goto Stop;
            edge when b_lift_downPressed and b_lift_upReleased goto Down;
        location Stop:
            initial;
            equation state = STOP;
            edge when b_lift_upPressed goto Up;
            edge when b_lift_downPressed goto Down;
        location Down:
            equation state = DOWN;
            edge when b_lift_upPressed and b_lift_downReleased  goto Up;
            edge when b_lift_downReleased goto Stop;
    end

    automaton PusherContr:
        location Extending:
            edge when b_pusherReleased goto Retracting;
        location Retracting:
            initial;
            edge when s_bufferingbusy goto Lockdown;     //Pusher will not push when the buffer is full
            edge when b_pusherPressed goto Extending;
        location Lockdown:
            edge when not s_bufferingbusy goto Retracting;
    end
end
