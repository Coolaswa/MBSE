import "testing_buffering_station_svg.cif";

alg bool s_Tstartbutton = startBttn.state;
alg bool s_Tstopbutton = startBttn.state;
//alg bool s_Tautoswitch;
alg bool s_Tresetbutton = startBttn.state;
alg bool a_elevator_up = LiftContr.Up;
alg bool a_elevator_down = LiftContr.Down;
alg bool a_pusher = PusherContr.Extending;

event e_startClicked, stopClicked, resetClicked, dummyEvent;
event lift_up_clicked, lift_down_clicked;
event pusher_clicked;

startBttn: Button(e_startClicked);
start_svg: Button_svg(e_startClicked, "start", "yellow", "grey",  startBttn.state);

stopBttn: Button(stopClicked);
stop_svg: Button_svg(stopClicked, "stop", "yellow", "grey",  stopBttn.state);
//resetBttn: Button(resetClicked);

svg_s_lift_up: Button_svg(dummyEvent, "s_lift_up", "yellow", "grey", LiftSensorUp.isActive);
svg_s_lift_down: Button_svg(dummyEvent, "s_lift_down", "yellow", "grey", LiftSensorDown.isActive);

b_lift_up: Button(lift_up_clicked);
svg_a_lift_up: Button_svg(lift_up_clicked, "a_lift_up", "yellow", "grey", b_lift_up.state);

b_lift_down: Button(lift_down_clicked);
svg_a_lift_down: Button_svg(lift_down_clicked, "a_lift_down", "yellow", "grey", b_lift_down.state);

b_pusher: Button(pusher_clicked);
svg_b_pusher: Button_svg(pusher_clicked, "b_pusher", "yellow", "grey", b_pusher.state);
svg_s_pusher: Button_svg(dummyEvent, "s_pusher", "yellow", "grey", PusherSensor.isActive);

svg_s_height: Button_svg(dummyEvent, "s_height", "yellow", "grey", HeightSensor.isActive);

event void e_pusher_activated;
type Point = tuple(real x, y);
type Rectangle = tuple(real x, y, width, height);

box1: Box(35, true);

automaton dummy:
	location:
		initial;
		edge dummyEvent when false;
end

automaton BoxUpdater:
	alg list[3] Rectangle data;
	location:
		equation data = [(box1.x,box1.y, 10,10), (1,1,1,1), (2,2,2,2)];
		initial;
end

func bool RectRectColl(Rectangle rect; list[3] Rectangle boxes):
	int i = 0;
	int length = size(boxes);
	while i < length:
		if (PointInRect(boxes[i], (rect[x], rect[y])) or 							// top left
			PointInRect(boxes[i], (rect[x]+rect[width], rect[y])) or				// top right
			PointInRect(boxes[i], (rect[x], rect[y] + rect[height])) or				// bot left
			PointInRect(boxes[i], (rect[x] + rect[width], rect[y]+rect[height]))):	// bot right
			return true;
		end
		i := i + 1;
	end

	return false;
end

func bool PointInRect(Rectangle rect; Point p):
	bool result = false;
	if (rect[x] <= p[x] and rect[y] <= p[y] and
		rect[x]+rect[width] >= p[x] and rect[y]+rect[height] >= p[y]):
		return true;
	end
	return false;
end

automaton def Box(alg int h; alg bool isCap):
	alg int height = h;
	alg bool isCapacitive = isCap;
	cont x = 138.30649, y=137.88513;
	location InLift:
		initial;
		equation x' = 0, y' = Lift.speed;
		edge e_pusher_activated? when LiftSensorUp.isActive goto OnAirslide;
	location OnAirslide:
		equation x' = -20, y' = 0;
end

automaton def Button(event Clicked):
	alg bool state;

	location Released:
		initial;
		equation state = false;
		edge Clicked goto Pressed;
	location Pressed:
		equation state = true;
		edge Clicked goto Released;
end

automaton Lift:
	alg real speed;
	cont y der speed;
	location Up:
		equation speed = -10;
		edge when not a_elevator_up goto Stop;
		edge when a_elevator_down goto Down;
		edge when LiftSensorUp.isActive goto Stop;
	location Stop:
		initial;
		equation speed = 0;
		edge when a_elevator_up and not LiftSensorUp.isActive goto Up;
		edge when a_elevator_down and not LiftSensorDown.isActive  goto Down;
	location Down:
		equation speed = 10;
		edge when not a_elevator_down goto Stop;
		edge when a_elevator_up goto Up;
		edge when LiftSensorDown.isActive goto Stop;
end

automaton Pusher:
	alg real speed;
	cont x der speed;
	location Extending:
		equation speed = if not PusherSensor.isActive: -20 else 0 end;
		edge when not a_pusher goto Retracting;
	location Retracting:
		initial;
		equation speed = if x < 0: 20 else 0 end;
		edge e_pusher_activated! when a_pusher goto Extending;
end

group LiftSensorUp:
	alg bool isActive = Lift.y <= -62;
end

group LiftSensorDown:
	alg bool isActive = Lift.y >= 0;
end

group PusherSensor:
	alg bool isActive = Pusher.Extending and Pusher.x < -35;
end

group HeightSensor:
	alg bool isActive = RectRectColl((157,54,9,37), BoxUpdater.data);
end
